diff -ruN SSHLibrary.org/abstractclient.py SSHLibrary/abstractclient.py
--- SSHLibrary.org/abstractclient.py	2018-11-13 20:51:38.294661170 +0900
+++ SSHLibrary/abstractclient.py	2018-11-13 20:49:35.453411224 +0900
@@ -121,7 +121,7 @@
         self._shell = None
         self.client.close()
 
-    def login(self, username, password, delay=None, look_for_keys=False):
+    def login(self, username, password, delay=None, look_for_keys=False, proxy_cmd=None):
         """Logs into the remote host using password authentication.
 
         This method reads the output from the remote host after logging in,
@@ -149,7 +149,7 @@
         username = self._encode(username)
         password = self._encode(password)
         try:
-            self._login(username, password, look_for_keys=look_for_keys)
+            self._login(username, password, look_for_keys=look_for_keys, proxy_cmd=proxy_cmd)
         except SSHClientException:
             raise SSHClientException("Authentication failed for user '%s'."
                                      % self._decode(username))
@@ -176,7 +176,7 @@
         return self.read_until_prompt()
 
     def login_with_public_key(self, username, keyfile, password, allow_agent=False,
-                              look_for_keys=False, delay=None):
+                              look_for_keys=False, delay=None,proxy_cmd=None):
         """Logs into the remote host using the public key authentication.
 
         This method reads the output from the remote host after logging in,
diff -ruN SSHLibrary.org/library.py SSHLibrary/library.py
--- SSHLibrary.org/library.py	2018-11-13 20:51:38.294661170 +0900
+++ SSHLibrary/library.py	2018-11-13 20:49:36.263399683 +0900
@@ -821,7 +821,7 @@
             self._log(str(c), self._config.loglevel)
         return configs
 
-    def login(self, username, password, delay='0.5 seconds'):
+    def login(self, username, password, delay='0.5 seconds', proxy_cmd=None):
         """Logs into the SSH server with the given ``username`` and ``password``.
 
         Connection must be opened before using this keyword.
@@ -843,11 +843,11 @@
         | ${output}=        | `Login`          | johndoe          | secretpasswd |
         | `Should Contain`  | ${output}        | johndoe@linux:~$ |
         """
-        return self._login(self.current.login, username, password, delay)
+        return self._login(self.current.login, username, password, delay, False, proxy_cmd)
 
     def login_with_public_key(self, username, keyfile, password='',
                               allow_agent=False, look_for_keys=False,
-                              delay='0.5 seconds'):
+                              delay='0.5 seconds', proxy_cmd = None):
         """Logs into the SSH server using key-based authentication.
 
         Connection must be opened before using this keyword.
diff -ruN SSHLibrary.org/pythonclient.py SSHLibrary/pythonclient.py
--- SSHLibrary.org/pythonclient.py	2018-11-13 20:51:38.294661170 +0900
+++ SSHLibrary/pythonclient.py	2018-11-13 20:49:36.739392906 +0900
@@ -66,22 +66,46 @@
         paramiko.util.log_to_file(path)
         return True
 
-    def _login(self, username, password, look_for_keys=False):
+    def _login(self, username, password, look_for_keys=False, proxy_cmd=None):
         try:
-            self.client.connect(self.config.host, self.config.port, username,
-                                password, look_for_keys=look_for_keys,
-                                allow_agent=look_for_keys,
-                                timeout=float(self.config.timeout))
+#            self.client.connect(self.config.host, self.config.port, username,
+#                                password, look_for_keys=look_for_keys,
+#                                allow_agent=look_for_keys,
+#                                timeout=float(self.config.timeout))
+            if proxy_cmd:
+                proxy = paramiko.ProxyCommand(proxy_cmd)
+                self.client.connect(self.config.host, self.config.port, username,
+                                    password, look_for_keys=look_for_keys,
+                                    allow_agent=look_for_keys,
+                                    timeout=float(self.config.timeout), sock=proxy)
+            else:
+                self.client.connect(self.config.host, self.config.port, username,
+                                    password, look_for_keys=look_for_keys,
+                                    allow_agent=look_for_keys,
+                                    timeout=float(self.config.timeout))
         except paramiko.AuthenticationException:
             raise SSHClientException
 
-    def _login_with_public_key(self, username, key_file, password, allow_agent, look_for_keys):
+    def _login_with_public_key(self, username, key_file, password, allow_agent, look_for_keys, proxy_cmd=None):
         try:
-            self.client.connect(self.config.host, self.config.port, username,
-                                password, key_filename=key_file,
-                                allow_agent=allow_agent,
-                                look_for_keys=look_for_keys,
-                                timeout=float(self.config.timeout))
+#            self.client.connect(self.config.host, self.config.port, username,
+#                                password, key_filename=key_file,
+#                                allow_agent=allow_agent,
+#                                look_for_keys=look_for_keys,
+#                                timeout=float(self.config.timeout))
+            if proxy_cmd:
+                proxy = paramiko.ProxyCommand(proxy_cmd)
+                self.client.connect(self.config.host, self.config.port, username,
+                                    password, key_filename=key_file,
+                                    allow_agent=allow_agent,
+                                    look_for_keys=look_for_keys,
+                                    timeout=float(self.config.timeout), sock=proxy)
+            else:
+                self.client.connect(self.config.host, self.config.port, username,
+                                    password, key_filename=key_file,
+                                    allow_agent=allow_agent,
+                                    look_for_keys=look_for_keys,
+                                    timeout=float(self.config.timeout))
         except paramiko.AuthenticationException:
             raise SSHClientException
 
